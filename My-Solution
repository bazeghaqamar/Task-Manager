
import os
from datetime import datetime, date

DATETIME_STRING_FORMAT = "%Y-%m-%d"

# Create tasks.txt if it doesn't exist
if not os.path.exists("tasks.txt"):
    with open("tasks.txt", "w") as default_file:
        pass

with open("tasks.txt", 'r') as task_file:
    task_data = task_file.read().split("\n")
    task_data = [t for t in task_data if t != ""]


task_list = []
for t_str in task_data:
    curr_t = {}

    # Split by semicolon and manually add each component
    task_components = t_str.split(";")
    curr_t['username'] = task_components[0]
    curr_t['title'] = task_components[1]
    curr_t['description'] = task_components[2]
    curr_t['due_date'] = datetime.strptime(task_components[3], DATETIME_STRING_FORMAT)
    curr_t['assigned_date'] = datetime.strptime(task_components[4], DATETIME_STRING_FORMAT)
    curr_t['completed'] = True if task_components[5] == "Yes" else False

    task_list.append(curr_t)


#====Login Section====
'''This code reads usernames and password from the user.txt file to 
    allow a user to login.
'''
# If no user.txt file, write one with a default account
if not os.path.exists("user.txt"):
    with open("user.txt", "w") as default_file:
        default_file.write("admin;password")

# Read in user_data
with open("user.txt", 'r') as user_file:
    user_data = user_file.read().split("\n")

# Convert to a dictionary
username_password = {}
for user in user_data:
    username, password = user.split(';')
    username_password[username] = password

logged_in = False
while not logged_in:

    print("LOGIN")
    curr_user = input("Username: ")
    curr_pass = input("Password: ")
    if curr_user not in username_password.keys():
        print("User does not exist")
        continue
    elif username_password[curr_user] != curr_pass:
        print("Wrong password")
        continue
    else:
        print("Login Successful!")
        logged_in = True


while True:
    # presenting the menu to the user and 
    # making sure that the user input is converted to lower case.
    print()
    menu = input('''Select one of the following Options below:
r - Registering a user
a - Adding a task
va - View all tasks
vm - View my task
gr - Generate reports
ds - Display statistics
e - Exit
: ''').lower()

    if menu == 'r':
        '''Add a new user to the user.txt file'''
        # - Request input of a new username
        new_username = input("New username: ")

        # - While loop used to check that there is no repeat of previous usernames
        while new_username in username_password.keys():
            print("User already exists.")
            new_username = input("Please try again with a different username: ")

        if new_username not in username_password.keys():
            # Request input of a new password and confirmation
            new_password = input("New Password: ")
            confirm_password = input("Confirm Password: ")

        # Check if the new password and confirmed password are the same.
        if new_password == confirm_password:
            # If they are the same, add them to the user.txt file,
            print("New user added")
            username_password[new_username] = new_password
            
            with open("user.txt", "w") as out_file:
                user_data = []
                for k in username_password:
                    user_data.append(f"{k};{username_password[k]}")
                out_file.write("\n".join(user_data))

        # Otherwise you present a relevant message.
        else:
            print("Passwords do not match")

    elif menu == 'a':
        '''Allow a user to add a new task to task.txt file
            Prompt a user for the following: 
             - A username of the person whom the task is assigned to,
             - A title of a task,
             - A description of the task and 
             - the due date of the task.'''
        task_username = input("Name of person assigned to task: ")
        if task_username not in username_password.keys():
            print("User does not exist. Please enter a valid username")
            continue
        task_title = input("Title of Task: ")
        task_description = input("Description of Task: ")
        while True:
            try:
                task_due_date = input("Due date of task (YYYY-MM-DD): ")
                due_date_time = datetime.strptime(task_due_date, DATETIME_STRING_FORMAT)
                break

            except ValueError:
                print("Invalid datetime format. Please use the format specified")


        # Then get the current date.
        curr_date = date.today()
        ''' Add the data to the file task.txt and
            Include 'No' to indicate if the task is complete.'''
        new_task = {
            "username": task_username,
            "title": task_title,
            "description": task_description,
            "due_date": due_date_time,
            "assigned_date": curr_date,
            "completed": False
        }

        task_list.append(new_task)
        with open("tasks.txt", "w") as task_file:
            task_list_to_write = []
            for t in task_list:
                str_attrs = [
                    t['username'],
                    t['title'],
                    t['description'],
                    t['due_date'].strftime(DATETIME_STRING_FORMAT),
                    t['assigned_date'].strftime(DATETIME_STRING_FORMAT),
                    "Yes" if t['completed'] else "No"
                ]
                task_list_to_write.append(";".join(str_attrs))
            task_file.write("\n".join(task_list_to_write))
        print("Task successfully added.")


    elif menu == 'va':
        '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling) 
        '''

        for t in task_list:
            disp_str = f"Task: \t\t {t['title']}\n"
            disp_str += f"Assigned to: \t {t['username']}\n"
            disp_str += f"Date Assigned: \t {t['assigned_date'].strftime(DATETIME_STRING_FORMAT)}\n"
            disp_str += f"Due Date: \t {t['due_date'].strftime(DATETIME_STRING_FORMAT)}\n"
            disp_str += f"Task Description: \n {t['description']}\n"
            print(disp_str)
            


    elif menu == 'vm':
        '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling)'''
    
        # Filter the task list by the logged-in user
        user_tasks = [task for task in task_list if task['username'] == curr_user]

        # Display the tasks with their details
        for i, task in enumerate(user_tasks):
            task_status = 'Complete' if task['completed'] else 'Incomplete'
            print(f"\nTask {i+1}:\nTitle: {task['title']}\nDescription: {task['description']}"
                  f"\nDue Date: {task['due_date'].strftime(DATETIME_STRING_FORMAT)}"
                  f"\nDate Assigned: {task['assigned_date'].strftime(DATETIME_STRING_FORMAT)}"
                  f"\nTask Status: {task_status}")

        # Prompt the user to select a task
        task_number = input("Enter the number of the task you want to edit or mark as complete (or -1 to return to the main menu): ")
        if task_number == '-1':
            continue

        # Get the task they want to edit
        task_index = int(task_number) - 1
        selected_task = user_tasks[task_index]

        # Check if the task is incomplete
        if selected_task['completed']:
            print("This task is already complete and cannot be edited")
            continue

        # Prompt the user to select an action
        action = input("Enter 'e' to edit the task or 'c' to mark the task as complete: ")
        if action.lower() == 'e':
            # Prompt the user to select what to edit
            edit_action = input("Enter 'u' to edit the username or 'd' to edit the due date: ")
            if edit_action.lower() == 'u':
                # Prompt the user for a new username
                new_username = input("Enter the new username: ")

                # Update the task with the new username
                selected_task['username'] = new_username

            elif edit_action.lower() == 'd':
                # Prompt the user for a new due date
                while True:
                    try:
                        new_due_date = input("Enter the new due date (YYYY-MM-DD): ")
                        due_date_time = datetime.strptime(new_due_date, DATETIME_STRING_FORMAT)
                        break
                    except ValueError:
                        print("Invalid datetime format. Please use the format specified")

                # Update the task with the new due date
                selected_task['due_date'] = due_date_time

            # Write the updated tasks to file
            with open("tasks.txt", "w") as task_file:
                for task in task_list:
                    task_str = f"{task['username']};{task['title']};{task['description']};{task['due_date'].strftime(DATETIME_STRING_FORMAT)};{task['assigned_date'].strftime(DATETIME_STRING_FORMAT)};{'Yes' if task['completed'] else 'No'}"
                    task_file.write(task_str + "\n")

            print("Task updated successfully")
            
        if action.lower() == 'c':
            selected_task['completed'] = True
            print("Task marked as complete")

        # Write the updated tasks to file
        with open("tasks.txt", "w") as task_file:
            for task in task_list:
                task_str = f"{task['username']};{task['title']};{task['description']};{task['due_date'].strftime(DATETIME_STRING_FORMAT)};{task['assigned_date'].strftime(DATETIME_STRING_FORMAT)};{'Yes' if task['completed'] else 'No'}"
                task_file.write(task_str + "\n")

    elif menu == 'gr':
        # Generate task overview report, use variables to store numbers that are then used for calculations
        total_tasks = len(task_list)
        total_completed = len([t for t in task_list if t["completed"]])
        total_incomplete = len([t for t in task_list if not t["completed"]])
        total_overdue = len([t for t in task_list if not t["completed"] and t["due_date"] < datetime.now()])
        incomplete_percentage = round((total_incomplete / total_tasks) * 100, 2)
        overdue_percentage = round((total_overdue / total_tasks) * 100, 2)

        # Write the report to the file in a user friendly manner
        report =f"Task Overview\nTotal tasks generated: {total_tasks}\n"\
                f"Total completed tasks: {total_completed}\n"\
                f"Total incomplete tasks: {total_incomplete}\n"\
                f"Total overdue tasks: {total_overdue}\n"\
                f"Percentage of incomplete tasks: {incomplete_percentage}%\n"\
                f"Percentage of overdue tasks: {overdue_percentage}%"

        with open("task_overview.txt", "w") as report_file:
            report_file.write(report)

        print("Task overview report generated successfully!")
                
        # Get the total number of users registered with the code
        num_users = len(username_password)

        # Get the total number of tasks generated and tracked by the code
        num_tasks = len(task_list)

        # Create a dictionary to store user-specific task information
        user_task_info = {}

        # Iterate through each task and update the user_task_info dictionary
        for task in task_list:
            user = task['username']

            # If the user is not already in the dictionary, add them
            if user not in user_task_info:
                user_task_info[user] = {
                    'total_tasks': 0,
                    'complete_tasks': 0,
                    'incomplete_tasks': 0,
                    'overdue_tasks': 0
                }

            # Update the user_task_info dictionary for the current task
            user_task_info[user]['total_tasks'] += 1
            if task['completed']:
                user_task_info[user]['complete_tasks'] += 1
            else:
                user_task_info[user]['incomplete_tasks'] += 1
                if task['due_date'].date() < date.today():
                    user_task_info[user]['overdue_tasks'] += 1

        # Write the report to user_overview.txt
        with open("user_overview.txt", "w") as report_file:
            report_file.write("User Overview\n")
            report_file.write(f"Total number of users registered: {num_users}\n")
            report_file.write(f"Total number of tasks generated: {num_tasks}\n")
            
            # Calculate percentages, use for loop to iterate through 
            for user in user_task_info:
                total_tasks = user_task_info[user]['total_tasks']
                complete_tasks = user_task_info[user]['complete_tasks']
                incomplete_tasks = user_task_info[user]['incomplete_tasks']
                overdue_tasks = user_task_info[user]['overdue_tasks']

                if total_tasks == 0:
                    percent_of_total_tasks = 0
                    percent_complete_tasks = 0
                    percent_incomplete_tasks = 0
                    percent_overdue_tasks = 0

                else:
                    percent_of_total_tasks = total_tasks / num_tasks * 100
                    percent_complete_tasks = complete_tasks / total_tasks * 100
                    percent_incomplete_tasks = incomplete_tasks / total_tasks * 100
                    percent_overdue_tasks = overdue_tasks / incomplete_tasks * 100

                # Write the user-specific task information to user_overview.txt
                report_file.write(f"\nUser: {user}\n")
                report_file.write(f"Total tasks assigned: {total_tasks}\n")
                report_file.write(f"Percentage of total tasks assigned: {percent_of_total_tasks:.2f}%\n")
                report_file.write(f"Percentage of complete tasks: {percent_complete_tasks:.2f}%\n")
                report_file.write(f"Percentage of incomplete tasks: {percent_incomplete_tasks:.2f}%\n")
                report_file.write(f"Percentage of overdue tasks: {percent_overdue_tasks:.2f}%\n\n")

        print("User overview successfully generated.")

    elif menu == 'ds' and curr_user == 'admin': 
        '''If the user is an admin they can display statistics about number of users
        and tasks.'''
        num_users = len(username_password.keys())
        num_tasks = len(task_list)

        # Check if the files exist, and create them if they don't
        if not os.path.exists('tasks.txt'):
            with open('tasks.txt', 'w') as f:
                f.write('No tasks have been added yet.\n')

        if not os.path.exists('user.txt'):
            with open('user.txt', 'w') as f:
                f.write('No users have been added yet.\n')

        # Display the reports from the files in user friendly manner
        print("-----------------------------------")
        print(f"Number of users: \t\t {num_users}")
        print(f"Number of tasks: \t\t {num_tasks}")
        print("-----------------------------------")

        print("\n--- Tasks ---\n")
        with open('tasks.txt', 'r') as f:
            tasks = f.read().replace(';', ' ')
        print(tasks)

        print("\n--- Users ---")
        with open('user.txt', 'r') as f:
            users = f.read().replace(';', ' ')
        print(users)


    elif menu == 'e':
        print('Goodbye!!!')
        exit()

    else:
        print("You have made a wrong choice, Please Try again")
